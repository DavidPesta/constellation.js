// Constellation.js 0.2.0
// (c) 2011-2013 Greg MacWilliam
// Freely distributed under the MIT license
// http://constellationjs.org
(function(t,n){var i=n(Math.sqrt,Math.min,Math.max,Math.abs);"undefined"!=typeof exports?module.exports=i:"function"==typeof define&&define.amd?define(i):t.Const=i})(this,function(t,n,i,e){function o(t){return t instanceof Array}function s(t){return"function"==typeof t}var r={},h=r.utils={size:function(t){if(o(t))return t.length;var n=0;for(var i in t)t.hasOwnProperty(i)&&n++;return n},contains:function(t,n){if(o(t)){if(s(Array.prototype.indexOf))return t.indexOf(n)>=0;for(var i=t.length,e=0;i>e;)if(t[e++]===n)return!0}return t.hasOwnProperty(n)},each:function(t,n,i){var e=0;if(o(t))for(var s=t.length;s>e;)n.call(i,t[e],e++);else for(e in t)t.hasOwnProperty(e)&&n.call(i,t[e],e);return t},map:function(t,n,i){var e=0;if(o(t))for(var s=t.length;s>e;)t[e]=n.call(i,t[e],e++);else for(e in t)t.hasOwnProperty(e)&&(t[e]=n.call(i,t[e],e));return t},all:function(t,n,i){for(var e=0,o=t.length;o>e;)if(!n.call(i,t[e],e++))return!1;return!0}},u=r.Point=function(t,n){this.x=t||0,this.y=n||0},a=r.Rect=function(t,n,i,e){this.x=t||0,this.y=n||0,this.width=i||0,this.height=e||0};r.distance=function(n,i){var e=i.x-n.x,o=i.y-n.y;return t(e*e+o*o)},r.ccw=function(t,n,i,e){return e?(i.y-t.y)*(n.x-t.x)>(n.y-t.y)*(i.x-t.x):(i.y-t.y)*(n.x-t.x)>=(n.y-t.y)*(i.x-t.x)},r.intersect=function(t,n,i,e){return r.ccw(t,i,e)!==r.ccw(n,i,e)&&r.ccw(t,n,i)!==r.ccw(t,n,e)},r.getRectForPointRing=function(t){var e=t[0],o=e.x,s=e.x,r=e.y,u=e.y;return h.each(t,function(t){o=n(o,t.x),s=i(s,t.x),r=n(r,t.y),u=i(u,t.y)}),new a(o,r,s-o,u-r)},r.hitTestRect=function(t,e){var o=n(e.x,e.x+e.width),s=i(e.x,e.x+e.width),r=n(e.y,e.y+e.height),h=i(e.y,e.y+e.height);return t.x>=o&&t.y>=r&&s>=t.x&&h>=t.y},r.hitTestPointRing=function(t,i){for(var e,o,s=i.length,r=new u(0,t.y),h=0,a=0;s>a;)e=i[a],o=i[(a+1)%s],r.x=n(r.x,n(e.x,o.x)-1),h+=this.intersect(r,t,e,o)?1:0,a++;return h%2>0},r.snapPointToLineSegment=function(t,n,i){var e=t.x-n.x,o=t.y-n.y,s=i.x-n.x,r=i.y-n.y,h=s*s+r*r,a=e*s+o*r,c=a/h;return 0>c?new u(n.x,n.y):c>1?new u(i.x,i.y):new u(n.x+s*c,n.y+r*c)},r.getNearestPointToPoint=function(t,n){var i,o,s=null,h=0/0,u=n.length-1;for(n.sort(function(n,i){return n=e(t.x-n.x),i=e(t.x-i.x),i-n});u>=0&&(i=n[u--],h>e(t.x-i.x)||isNaN(h));)o=r.distance(t,i),(h>o||isNaN(h))&&(s=i,h=o);return s};var c=r.Node=function(t,n,i,e,o){this.id=t,this.x=n||0,this.y=i||0,this.to=o||{},this.data=e||null},d=r.Polygon=function(t,n,i){this.id=t,this.nodes=n.slice(),this.data=i||null},f=r.Path=function(t,n,i){this.nodes=t||[],this.weight=n||0,this.estimate=i||0};f.prototype={copy:function(t,n){return new f(this.nodes.slice(),t||this.weight,n||this.estimate)},last:function(){return this.nodes[this.nodes.length-1]},contains:function(t){return h.contains(t)},prioratize:function(t,n){return n.estimate-t.estimate},dispose:function(){this.nodes.length=0,this.nodes=null}};var l=r.Grid=function(t){this.reset(t)};return l.prototype={nodes:{},polys:{},_i:0,toJSON:function(){return{nodes:this.nodes,polys:this.polys,_i:this._i}},reset:function(t){this.nodes={},this.polys={},this._i=0,t&&(t._i&&(this._i=t._i),h.each(t.nodes||{},function(t){this.nodes[t.id]=t},this),h.each(t.polys||{},function(t){this.polys[t.id]=t},this))},addNode:function(t,n,i){"object"==typeof t&&(i=t);var e=new c("n"+this._i++,t||0,n||0,i);return this.nodes[e.id]=e,e.id},getNode:function(t){return o(t)?h.map(t.slice(),function(t){return this.nodes[t]},this):this.nodes.hasOwnProperty(t)?this.nodes[t]:null},getNumNodes:function(){return h.size(this.nodes)},hasNodes:function(t){return o(t)?h.all(t,function(t){return this.nodes.hasOwnProperty(t)},this):this.nodes.hasOwnProperty(t)},joinNodes:function(t){var n=!1;return t.length>1&&this.hasNodes(t)&&h.each(t,function(i){for(var e=this.nodes[i],o=t.length,s=0;o>s;)i=t[s++],i!==e.id&&(e.to[i]=1,n=!0)},this),n},splitNodes:function(t){var n=!1;return 2>t.length?this.detachNodes(t):(h.each(t,function(i){var e=this.nodes[i];if(e&&e.to)for(i in e.to)h.contains(t,i)&&(delete e.to[i],n=!0)},this),n)},detachNodes:function(t){var n=!1;return h.each(t,function(t){var i,e,o=this.nodes[t];if(o&&o.to){for(e in o.to)delete o.to[e],i=this.nodes[e],i&&i.to&&delete i.to[t];n=!0}},this),n},removeNodes:function(t){var n=this.detachNodes(t);return h.each(t,function(t){var i,e;if(this.nodes.hasOwnProperty(t)){delete this.nodes[t];for(e in this.polys)i=this.polys[e],i&&h.contains(i.nodes,t)&&delete this.polys[e];n=!0}},this),n},addPolygon:function(t,n){var i;return t.length>=3&&this.hasNodes(t)?(i=new d("p"+this._i++,t,n),this.polys[i.id]=i,i.id):null},getPolygon:function(t){return o(t)?h.map(t.slice(),function(t){return this.polys[t]},this):this.polys.hasOwnProperty(t)?this.polys[t]:null},getNodesForPolygon:function(t){return this.polys.hasOwnProperty(t)?h.map(this.polys[t].nodes.slice(),function(t){return this.nodes[t]},this):null},getNumPolygons:function(){return h.size(this.polys)},removePolygons:function(t){var n=!1;return o(t)?h.each(t,function(t){this.polys.hasOwnProperty(t)&&(delete this.polys[t],n=!0)},this):this.polys.hasOwnProperty(t)&&(delete this.polys[t],n=!0),n},findPath:function(t,n,i,e){var o,h,u,a,c,d,l,y=[],p={},g=this.getNode(t),P=this.getNode(n),x=0;for(s(i)||(i=r.distance),s(e)||(e=r.distance),y.push(new f([g],i(g,g)));y.length>0;){h=y.pop(),g=h.last();for(l in g.to)g.to.hasOwnProperty(l)&&(u=this.nodes[l],u&&!h.contains(u)&&(c=h.weight+i(g,u),(p[u.id]||c)>=c&&(p[u.id]=c,d=c+e(u,P),(!o||o.weight>d)&&(a=h.copy(c,d),a.nodes.push(u),u.id===P.id?(o&&o.dispose(),o=a):y.push(a),a=null))),u=null);h.dispose(),h=g=null,y.sort(f.prototype.prioratize),x++}return y=p=P=null,{valid:!!o,weight:o?o.weight:0,cycles:x,nodes:o?o.nodes:[]}},findPathWithFewestNodes:function(t,n){var i=function(){return 1};return this.findPath(t,n,i,i)},snapPointToGrid:function(t){var n=null,i=0/0,e={};return h.each(this.nodes,function(o,s){if(t.id!==s)for(var h in o.to)if(o.to.hasOwnProperty(h)&&!e.hasOwnProperty(h+" "+o.id)){var u=this.nodes[h],a=r.snapPointToLineSegment(t,o,u),c=r.distance(t,a);e[o.id+" "+u.id]=!0,(!n||i>c)&&(n=a,i=c)}},this),n||t},getNearestNodeToNode:function(t){var n=null,i=[],e=this.getNode(t);return e&&(h.each(this.nodes,function(t){t.id!==e.id&&i.push(t)},this),n=r.getNearestPointToPoint(e,i),i.length=0),n},getNearestNodeToPoint:function(t){var n=[];return h.each(this.nodes,function(t){n.push(t)},this),t=r.getNearestPointToPoint(t,n),n.length=0,t},hitTestPointInPolygons:function(t){for(var n in this.polys)if(this.polys.hasOwnProperty(n)&&r.hitTestPointRing(t,this.getNodesForPolygon(n)))return!0;return!1},getPolygonHitsForPoint:function(t){var n=[];return h.each(this.polys,function(i,e){r.hitTestPointRing(t,this.getNodesForPolygon(e))&&n.push(i.id)},this),n},getNodesInPolygon:function(t){var n=[],i=this.getPolygon(t),e=this.getNodesForPolygon(t),o=r.getRectForPointRing(e);return i&&h.each(this.nodes,function(t){r.hitTestRect(t,o)&&!h.contains(i.nodes,t.id)&&r.hitTestPointRing(t,e)&&n.push(t.id)},this),n},getNodesInRect:function(t){var n=[];return h.each(this.nodes,function(i){r.hitTestRect(i,t)&&n.push(i.id)},this),n}},r});